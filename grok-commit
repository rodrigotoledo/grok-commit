#!/bin/bash

# Usage message
usage() {
  echo "Usage: $0 [--set-language=<lang>]"
  echo "Available languages: en, pt-BR"
  exit 1
}

# Parse command-line options
while [ $# -gt 0 ]; do
  case "$1" in
    --set-language=*)
      language="${1#*=}"
      if [ "$language" != "en" ] && [ "$language" != "pt-BR" ]; then
        echo "Error: Invalid language '$language'. Use 'en' or 'pt-BR'."
        exit 1
      fi
      # Determine shell config file (prefer ~/.zshrc if exists, else ~/.bashrc)
      if [ -f "$HOME/.zshrc" ]; then
        shell_config="$HOME/.zshrc"
      else
        shell_config="$HOME/.bashrc"
      fi
      # Update or append GROK_COMMIT_LANGUAGE
      if grep -q "^export GROK_COMMIT_LANGUAGE=" "$shell_config"; then
        # Replace existing line
        sed -i "s/^export GROK_COMMIT_LANGUAGE=.*/export GROK_COMMIT_LANGUAGE=\"$language\"/" "$shell_config"
      else
        # Append with newline
        echo -e "\nexport GROK_COMMIT_LANGUAGE=\"$language\"" >> "$shell_config"
      fi
      echo "Language set to '$language' in $shell_config. Reload your shell with 'source $shell_config'."
      exit 0
      ;;
    *)
      usage
      ;;
  esac
  shift
done

# Check for GROK_API_KEY
if [ -z "$GROK_API_KEY" ]; then
  echo "Error: Please set the GROK_API_KEY environment variable with your xAI API key."
  echo "For API details, visit https://x.ai/api."
  exit 1
fi

# Get language (default to English)
language="${GROK_COMMIT_LANGUAGE:-en}"
if [ "$language" != "en" ] && [ "$language" != "pt-BR" ]; then
  echo "Error: Invalid GROK_COMMIT_LANGUAGE '$language'. Use 'en' or 'pt-BR'."
  exit 1
fi

# Capture staged changes (limit to 5,000 characters)
diff_output=$(git diff --cached | head -c 5000)
if [ -z "$diff_output" ]; then
  echo "No staged changes found. Please run 'git add' first."
  exit 1
fi

# Set prompt based on language
if [ "$language" = "pt-BR" ]; then
  prompt="Gere uma mensagem de commit Git concisa em português no formato Conventional Commits (ex: \"feat: adiciona nova funcionalidade\"). Use apenas o prefixo \"feat\", \"fix\", \"docs\", \"style\", \"refactor\", \"test\", ou \"chore\". Não inclua aspas ou texto explicativo adicional.\nBaseie-se nestas mudanças:\n\n$diff_output"
else
  prompt="Generate a concise Git commit message in English in Conventional Commits format (e.g., \"feat: adds new functionality\"). Use only the prefix \"feat\", \"fix\", \"docs\", \"style\", \"refactor\", \"test\", or \"chore\". Do not include quotes or extra explanatory text.\nBase it on these changes:\n\n$diff_output"
fi

# API call configuration
api_endpoint="https://api.x.ai/v1/chat/completions"
model="grok-3"

# Prepare JSON payload
request_body=$(jq -n \
  --arg model "$model" \
  --arg prompt "$prompt" \
  '{
    model: $model,
    messages: [
      { role: "system", content: "You are an assistant that generates clear and professional Git commit messages in Conventional Commits format." },
      { role: "user", content: $prompt }
    ],
    max_tokens: 200,
    temperature: 0.7
  }')

# Make API request
response=$(curl -s -w "%{http_code}" \
  -H "Authorization: Bearer $GROK_API_KEY" \
  -H "Content-Type: application/json" \
  -d "$request_body" \
  "$api_endpoint")

# Split response into body and status code
http_code="${response: -3}"
response_body="${response%???}"

if [ "$http_code" -eq 500 ]; then
  echo "Error 500: Internal server issue at xAI. Try again later or check https://status.x.ai/."
  echo "Response body: $response_body"
  exit 1
elif [ "$http_code" -ne 200 ]; then
  echo "API Error: Code $http_code - $response_body"
  exit 1
fi

# Extract and sanitize commit message
generated_message=$(echo "$response_body" | jq -r '.choices[0].message.content' | tr -d '\n' | tr -d '"' | tr -d "'")
# Ensure it matches Conventional Commits format
if ! echo "$generated_message" | grep -qE '^(feat|fix|docs|style|refactor|test|chore): .+'; then
  echo "Error: Generated message '$generated_message' does not follow Conventional Commits format."
  exit 1
fi

# Perform the commit
commit_command="git commit -m '$generated_message'"
echo "Running: $commit_command"
if ! eval "$commit_command"; then
  echo "Error executing commit. Check Git status with 'git status'."
  exit 1
fi